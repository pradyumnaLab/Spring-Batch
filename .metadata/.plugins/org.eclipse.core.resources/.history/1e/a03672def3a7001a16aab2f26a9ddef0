package com.pk.batch.BatchDemo.configuration;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.batch.item.file.transform.LineTokenizer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;

import com.pk.batch.BatchDemo.model.User;

@Configuration
public class BatchConfiguration {

	@Bean
	public Job job(JobBuilderFactory jobBuilderFactory, StepBuilderFactory stepBuilderFactory,
			ItemReader<User> itemReader, ItemProcessor<User, User> itemPocessor, 
			ItemWriter<User> itemWriter) {
			
		Step flow =stepBuilderFactory.get("Step-1")
				.<User, User> chunk(100)
				.reader(itemReader)
				.processor(itemPocessor)
				.writer(itemWriter)
				.build();
				
		Job job= jobBuilderFactory.get("ETL-Load")	
					.incrementer(new RunIdIncrementer())
					.start(flow)
					.build();
		
		return job;
		
	}

	public FlatFileItemReader<User> fileReader(@Value("${inputFile}") Resource resource) {
		FlatFileItemReader<User> fileReader = new FlatFileItemReader<>();
		fileReader.setName("CSV-Reader");
		fileReader.setResource(resource);
		fileReader.setLinesToSkip(2);
		//fileReader.setStrict(false);
		fileReader.setLineMapper(getLineMapper());
		return fileReader;
	}

	private LineMapper<User> getLineMapper() {
		DefaultLineMapper<User> lineMapper = new DefaultLineMapper<>();
		
		DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();
		tokenizer.setDelimiter(",");
		tokenizer.setStrict(false);
		tokenizer.setNames(new String[] {"Id","Name","Department","Salary"});
		lineMapper.setLineTokenizer(tokenizer);
		
		return lineMapper;
	}
}
